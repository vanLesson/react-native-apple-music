{"version":3,"file":"music-kit.js","sources":["../../src/modules/music-kit.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport type { CatalogSearchType, ICatalogSearch } from '../types/catalog-search';\nimport type { MusicItem } from '../types/music-item';\nimport type { ITracksFromLibrary } from '../types/tracks-from-library';\n\nconst { MusicModule } = NativeModules;\n\ninterface IEndlessListOptions {\n  offset?: number;\n  limit?: number;\n}\n\nclass MusicKit {\n  /**\n   * Searches the Apple Music catalog using the specified search terms, types, and options.\n   * @param {string} search - The search query string.\n   * @param {CatalogSearchType[]} types - The types of catalog items to search for.\n   * @param {IEndlessListOptions} [options] - Additional options for the search.\n   * @returns {Promise<ISong[]>} A promise that resolves to the search results.\n   */\n  public static async catalogSearch(\n    search: string,\n    types: CatalogSearchType[],\n    options?: IEndlessListOptions,\n  ): Promise<ICatalogSearch | undefined> {\n    try {\n      return (await MusicModule.catalogSearch(search, types, options)) as ICatalogSearch;\n    } catch (error) {\n      console.error('Apple Music Kit: Catalog Search failed.', error);\n\n      return {\n        songs: [],\n        albums: [],\n      };\n    }\n  }\n\n  /**\n   * @param itemId - ID of collection to be set in a player's queue\n   * @param {MusicItem} type - Type of collection to be found and set\n   * @returns {Promise<boolean>} A promise is resolved when tracks successfully added to a queue\n   */\n  public static async setPlaybackQueue(itemId: string, type: MusicItem): Promise<void> {\n    try {\n      await MusicModule.setPlaybackQueue(itemId, type);\n    } catch (error) {\n      console.error('Apple Music Kit: Setting Playback Failed.', error);\n    }\n  }\n\n  /**\n   * Get a list of recently played items in user's library\n   * @return {Promise<ITracksFromLibrary[]>} A promise returns a list of recently played items including tracks, playlists, stations, albums\n   */\n  public static async getTracksFromLibrary(): Promise<ITracksFromLibrary> {\n    try {\n      const result = await MusicModule.getTracksFromLibrary();\n\n      return result as ITracksFromLibrary;\n    } catch (error) {\n      console.error('Apple Music Kit: Getting tracks from user library failed.', error);\n\n      return {\n        recentlyPlayedItems: [],\n      };\n    }\n  }\n}\n\nexport default MusicKit;\n"],"names":[],"mappings":";;AAKA,MAAM,EAAE,WAAW,EAAE,GAAG,aAAa,CAAC;AAOtC,MAAM,QAAQ,CAAA;AACZ;;;;;;AAMG;IACI,aAAa,aAAa,CAC/B,MAAc,EACd,KAA0B,EAC1B,OAA6B,EAAA;AAE7B,QAAA,IAAI;AACF,YAAA,QAAQ,MAAM,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,EAAoB;SACpF;QAAC,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAEhE,OAAO;AACL,gBAAA,KAAK,EAAE,EAAE;AACT,gBAAA,MAAM,EAAE,EAAE;aACX,CAAC;SACH;KACF;AAED;;;;AAIG;AACI,IAAA,aAAa,gBAAgB,CAAC,MAAc,EAAE,IAAe,EAAA;AAClE,QAAA,IAAI;YACF,MAAM,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SAClD;QAAC,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;SACnE;KACF;AAED;;;AAGG;IACI,aAAa,oBAAoB,GAAA;AACtC,QAAA,IAAI;AACF,YAAA,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,oBAAoB,EAAE,CAAC;AAExD,YAAA,OAAO,MAA4B,CAAC;SACrC;QAAC,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,2DAA2D,EAAE,KAAK,CAAC,CAAC;YAElF,OAAO;AACL,gBAAA,mBAAmB,EAAE,EAAE;aACxB,CAAC;SACH;KACF;AACF;;;;"}