{"version":3,"file":"player.js","sources":["../../src/modules/player.ts"],"sourcesContent":["import type { EmitterSubscription } from 'react-native';\n// eslint-disable-next-line import/named\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport type { IPlaybackState } from '../types/playback-state';\nimport type { ISong } from '../types/song';\n\nconst { MusicModule } = NativeModules;\n\ninterface IPlayerEvents {\n  onPlaybackStateChange: IPlaybackState;\n  onCurrentSongChange: ISong;\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\nconst nativeEventEmitter = new NativeEventEmitter(MusicModule);\n\nclass Player {\n  /**\n   * Skips to the next entry in the playback queue.\n   */\n  public static skipToNextEntry(): void {\n    MusicModule.skipToNextEntry();\n  }\n\n  /**\n   * Toggles the playback state between play and pause.\n   */\n  public static togglePlayerState(): void {\n    MusicModule.togglePlayerState();\n  }\n\n  /**\n   * Starts playback of the current song.\n   */\n  public static play(): void {\n    MusicModule.play();\n  }\n\n  /**\n   * Pauses playback of the current song.\n   */\n  public static pause(): void {\n    MusicModule.pause();\n  }\n\n  /**\n   * Retrieves the current playback state from the native music player.\n   * This function returns a promise that resolves to the current playback state.\n   * @returns {Promise<IPlaybackState>} A promise that resolves to the current playback state of the music player.\n   */\n  public static getCurrentState(): Promise<IPlaybackState> {\n    return new Promise((res, rej) => {\n      try {\n        MusicModule.getCurrentState(res);\n      } catch (error) {\n        console.error('Apple Music Kit: getCurrentState failed.', error);\n\n        rej(error);\n      }\n    });\n  }\n\n  /**\n   * Method to add a listener for an event.\n   * @param eventType - Type of the event to listen for.\n   * @param listener - Function to execute when the event is emitted.\n   * @returns An EmitterSubscription which can be used to remove the listener.\n   */\n  public static addListener(\n    eventType: keyof IPlayerEvents,\n    listener: (eventData: any) => void,\n  ): EmitterSubscription {\n    return nativeEventEmitter.addListener(eventType, listener);\n  }\n\n  /**\n   * Method to remove all listeners of event\n   * @param eventType - Type of the event to remove listener for.\n   */\n  public static removeAllListeners(eventType: keyof IPlayerEvents): void {\n    return nativeEventEmitter.removeAllListeners(eventType);\n  }\n}\n\nexport default Player;\n"],"names":[],"mappings":";;AACA;AAKA,MAAM,EAAE,WAAW,EAAE,GAAG,aAAa,CAAC;AAMtC;AACA,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;AAE/D,MAAM,MAAM,CAAA;AACV;;AAEG;AACI,IAAA,OAAO,eAAe,GAAA;QAC3B,WAAW,CAAC,eAAe,EAAE,CAAC;KAC/B;AAED;;AAEG;AACI,IAAA,OAAO,iBAAiB,GAAA;QAC7B,WAAW,CAAC,iBAAiB,EAAE,CAAC;KACjC;AAED;;AAEG;AACI,IAAA,OAAO,IAAI,GAAA;QAChB,WAAW,CAAC,IAAI,EAAE,CAAC;KACpB;AAED;;AAEG;AACI,IAAA,OAAO,KAAK,GAAA;QACjB,WAAW,CAAC,KAAK,EAAE,CAAC;KACrB;AAED;;;;AAIG;AACI,IAAA,OAAO,eAAe,GAAA;QAC3B,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAI;AAC9B,YAAA,IAAI;AACF,gBAAA,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;aAClC;YAAC,OAAO,KAAK,EAAE;AACd,gBAAA,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;gBAEjE,GAAG,CAAC,KAAK,CAAC,CAAC;aACZ;AACH,SAAC,CAAC,CAAC;KACJ;AAED;;;;;AAKG;AACI,IAAA,OAAO,WAAW,CACvB,SAA8B,EAC9B,QAAkC,EAAA;QAElC,OAAO,kBAAkB,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;KAC5D;AAED;;;AAGG;IACI,OAAO,kBAAkB,CAAC,SAA8B,EAAA;AAC7D,QAAA,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;KACzD;AACF;;;;"}