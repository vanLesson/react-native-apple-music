{"version":3,"file":"use-is-playing.js","sources":["../../src/hooks/use-is-playing.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Player from '../modules/player';\nimport type { IPlaybackState } from '../types/playback-state';\nimport { PlaybackStatus } from '../types/playback-status';\n\n/**\n * Custom React hook to track music playback status.\n * It interacts with the native music player via the MusicKit to determine\n * whether music is currently playing and provides a reactive `isPlaying` state.\n * @returns {{ isPlaying: boolean; error?: Error }} The `isPlaying` state indicating whether music is currently playing.\n */\nconst useIsPlaying = (): { isPlaying: boolean; error?: Error } => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [error, setError] = useState<Error>();\n\n  useEffect(() => {\n    Player.getCurrentState()\n      .then((state: IPlaybackState) =>\n        setIsPlaying(state?.playbackStatus === PlaybackStatus.PLAYING),\n      )\n      .catch(setError);\n\n    const listener = Player.addListener('onPlaybackStateChange', (state: IPlaybackState) => {\n      setError(undefined);\n      setIsPlaying(state.playbackStatus === PlaybackStatus.PLAYING);\n    });\n\n    return () => listener.remove();\n  }, []);\n\n  return { isPlaying, error };\n};\n\nexport default useIsPlaying;\n"],"names":[],"mappings":";;;;AAKA;;;;;AAKG;AACG,MAAA,YAAY,GAAG,MAA4C;IAC/D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,EAAS,CAAC;IAE5C,SAAS,CAAC,MAAK;QACb,MAAM,CAAC,eAAe,EAAE;AACrB,aAAA,IAAI,CAAC,CAAC,KAAqB,KAC1B,YAAY,CAAC,KAAK,EAAE,cAAc,KAAK,cAAc,CAAC,OAAO,CAAC,CAC/D;aACA,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEnB,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,uBAAuB,EAAE,CAAC,KAAqB,KAAI;YACrF,QAAQ,CAAC,SAAS,CAAC,CAAC;YACpB,YAAY,CAAC,KAAK,CAAC,cAAc,KAAK,cAAc,CAAC,OAAO,CAAC,CAAC;AAChE,SAAC,CAAC,CAAC;AAEH,QAAA,OAAO,MAAM,QAAQ,CAAC,MAAM,EAAE,CAAC;KAChC,EAAE,EAAE,CAAC,CAAC;AAEP,IAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;AAC9B;;;;"}